using DomainFramework.Core;
using System;
using System.Collections.Generic;
using System.Linq;

namespace SimpleEntityWithAutoGeneratedKey.SimpleEntityWithAutoGeneratedKeyBoundedContext
{
    public class SaveTestEntityCommandAggregate : CommandAggregate<TestEntity>
    {
        public SaveTestEntityCommandAggregate() : base(new DomainFramework.DataAccess.RepositoryContext(SimpleEntityWithAutoGeneratedKeyConnectionClass.GetConnectionName()))
        {
        }

        public SaveTestEntityCommandAggregate(SaveTestEntityInputDto entity, EntityDependency[] dependencies = null) : base(new DomainFramework.DataAccess.RepositoryContext(SimpleEntityWithAutoGeneratedKeyConnectionClass.GetConnectionName()))
        {
            Initialize(entity, dependencies);
        }

        public override void Initialize(IInputDataTransferObject entity, EntityDependency[] dependencies)
        {
            Initialize((SaveTestEntityInputDto)entity, dependencies);
        }

        private void Initialize(SaveTestEntityInputDto entity, EntityDependency[] dependencies)
        {
            RegisterCommandRepositoryFactory<TestEntity>(() => new TestEntityCommandRepository());

            RootEntity = new TestEntity
            {
                Id = entity.TestEntityId,
                Text = entity.Text,
                Enumeration1 = entity.Enumeration1,
                TypeValue1 = new TypeValue
                {
                    DataType = entity.TypeValue1.DataType,
                    Data = entity.TypeValue1.Data
                },
                Url = new Url
                {
                    Value = entity.Url.Value
                },
                Distance = (entity.Distance != null) ? new SelectionCriteria
                {
                    Selected = entity.Distance.Selected,
                    YesNoNotSure = entity.Distance.YesNoNotSure
                } : null,
                Traffic = (entity.Traffic != null) ? new SelectionCriteria
                {
                    Selected = entity.Traffic.Selected,
                    YesNoNotSure = entity.Traffic.YesNoNotSure
                } : null,
                Time = (entity.Time != null) ? new SelectionCriteria
                {
                    Selected = entity.Time.Selected,
                    YesNoNotSure = entity.Time.YesNoNotSure
                } : null
            };

            Enqueue(new SaveEntityCommandOperation<TestEntity>(RootEntity, dependencies));
        }

    }
}