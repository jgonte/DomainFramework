using DataAccess;
using DomainFramework.Core;
using DomainFramework.DataAccess;
using System;
using System.Linq;
using System.Threading.Tasks;
using Utilities;

namespace SimpleEntityWithAutoGeneratedKey.SimpleEntityWithAutoGeneratedKeyBoundedContext
{
    public class TestEntityCommandRepository : EntityCommandRepository<TestEntity>
    {
        protected override Command CreateInsertCommand(TestEntity entity, IAuthenticatedUser user, string selector)
        {
            if (user != null)
            {
                entity.CreatedBy = (int)user.Id;
            }

            var command = Query<TestEntity>
                .Single()
                .Connection(SimpleEntityWithAutoGeneratedKeyConnectionClass.GetConnectionName())
                .StoredProcedure("[SimpleEntityWithAutoGeneratedKeyBoundedContext].[pTestEntity_Insert]")
                .Parameters(
                    p => p.Name("text").Value(entity.Text),
                    p => p.Name("enumeration1").Value(entity.Enumeration1),
                    p => p.Name("createdBy").Value(entity.CreatedBy),
                    p => p.Name("url_Value").Value(entity.Url.Value),
                    p => p.Name("typeValue1_DataType").Value(entity.TypeValue1.DataType),
                    p => p.Name("typeValue1_Data").Value(entity.TypeValue1.Data),
                    p => p.Name("distance_Selected").Value(entity.Distance?.Selected),
                    p => p.Name("distance_YesNoNotSure").Value(entity.Distance?.YesNoNotSure),
                    p => p.Name("traffic_Selected").Value(entity.Traffic?.Selected),
                    p => p.Name("traffic_YesNoNotSure").Value(entity.Traffic?.YesNoNotSure),
                    p => p.Name("time_Selected").Value(entity.Time?.Selected),
                    p => p.Name("time_YesNoNotSure").Value(entity.Time?.YesNoNotSure)
                )
                .RecordInstance(entity)
                .MapProperties(
                    p => p.Name("Id").Index(0),
                    p => p.Name("IsActive").Index(1)
                );

            return command;
        }

        protected override void HandleInsert(Command command)
        {
            ((SingleQuery<TestEntity>)command).Execute();
        }

        protected async override Task HandleInsertAsync(Command command)
        {
            await ((SingleQuery<TestEntity>)command).ExecuteAsync();
        }

        protected override Command CreateUpdateCommand(TestEntity entity, IAuthenticatedUser user, string selector)
        {
            return Command
                .NonQuery()
                .Connection(SimpleEntityWithAutoGeneratedKeyConnectionClass.GetConnectionName())
                .StoredProcedure("[SimpleEntityWithAutoGeneratedKeyBoundedContext].[pTestEntity_Update]")
                .Parameters(
                    p => p.Name("testEntityId").Value(entity.Id),
                    p => p.Name("text").Value(entity.Text),
                    p => p.Name("enumeration1").Value(entity.Enumeration1),
                    p => p.Name("isActive").Value(entity.IsActive),
                    p => p.Name("url_Value").Value(entity.Url.Value),
                    p => p.Name("typeValue1_DataType").Value(entity.TypeValue1.DataType),
                    p => p.Name("typeValue1_Data").Value(entity.TypeValue1.Data),
                    p => p.Name("distance_Selected").Value(entity.Distance?.Selected),
                    p => p.Name("distance_YesNoNotSure").Value(entity.Distance?.YesNoNotSure),
                    p => p.Name("traffic_Selected").Value(entity.Traffic?.Selected),
                    p => p.Name("traffic_YesNoNotSure").Value(entity.Traffic?.YesNoNotSure),
                    p => p.Name("time_Selected").Value(entity.Time?.Selected),
                    p => p.Name("time_YesNoNotSure").Value(entity.Time?.YesNoNotSure),
                    p => p.Name("userId").Value(user.Id)
                );
        }

        protected override bool HandleUpdate(Command command)
        {
            var result = ((NonQueryCommand)command).Execute();

            return result.AffectedRows > 0;
        }

        protected async override Task<bool> HandleUpdateAsync(Command command)
        {
            var result = await ((NonQueryCommand)command).ExecuteAsync();

            return result.AffectedRows > 0;
        }

        protected override Command CreateDeleteCommand(TestEntity entity, IAuthenticatedUser user, string selector)
        {
            return Command
                .NonQuery()
                .Connection(SimpleEntityWithAutoGeneratedKeyConnectionClass.GetConnectionName())
                .StoredProcedure("[SimpleEntityWithAutoGeneratedKeyBoundedContext].[pTestEntity_Delete]")
                .Parameters(
                    p => p.Name("testEntityId").Value(entity.Id),
                    p => p.Name("userId").Value(user.Id)
                );
        }

        protected override bool HandleDelete(Command command)
        {
            var result = ((NonQueryCommand)command).Execute();

            return result.AffectedRows > 0;
        }

        protected async override Task<bool> HandleDeleteAsync(Command command)
        {
            var result = await ((NonQueryCommand)command).ExecuteAsync();

            return result.AffectedRows > 0;
        }

    }
}